■ 開発
・ウォーターフォール開発
手順を1つずつ確実に確認しながら工程を進めていく手法。
担当と責任者、クライアントが各工程の成果を確認し、双方の合意があれば次に進む。
スケジュールを立てやすいが、丁寧に仕上げていくので時間がかかる。後から仕様変更する場合は多大な手間となる。

・アジャイル開発
システムにおける優先度に順位をつけ、短い期間での納品を目指す手法。
要件定義→設計→開発→テスト→リリースというサイクルを何度も繰り返し、機能を一つ一つ完成させていく。

・マイグレーション
プログラムやデータ、OSなどを別の製品に入れ替えること。

・デグレーション
開発作業の結果、新たなバグが発生するなどして改悪になってしまうこと。

・デプロイ
システム開発工程において、システムを利用可能な状態にすること。

・コンフリクト
複数のプログラムが同じ名前の変数などを定義していて、両者を同時に利用できない状態になってしまうこと。

・環境
ソフトウェアにとって、それが導入されるコンピュータのハードウェアの構成や設定、OSなどソフトウェアの構成や設定、および、それら全体の組み合わせのこと

・開発環境（ローカル）
何かを開発するために自分のパソコンの中で作った環境のこと

・検証環境（ステージング）
開発中のシステムが正しく動作するか検証するための環境のこと

・本番環境
完成したシステムを実際に稼働させて利用するための環境のこと

・設計書／仕様書
設計書はシステムの開発方法を説明したもの。仕様書は開発するシステムについてを説明したもの。

・要件定義
クライアントの要望を満たすため、システムに実装すべき機能や性能などのを明確にしていくこと

・基本設計書
開発するシステムの全体像や概要をまとめたもの。

・詳細設計書
開発するシステムにおいて各機能に必要な処理などをまとめたもの。

・テスト
システムが正常に動作するか確認する検証作業のこと。

・単体テスト（UT）
対象モジュールが正常に動作するか検証すること。

・結合テスト（CT／IT）
複数のモジュールを結合させて正常に動作するか検証すること。

・総合テスト（ST）
完成したシステムを本番と殆ど同じ環境で検証すること。

・エビデンス／証跡
プログラムやシステムの動作検証結果を書類やデータとして残したもの。

・データパッチ
プログラムやデータを修正するために、相違点の部分を個別に抜き出したデータのこと。

・Access
リレーショナルデータベースを作成・管理するためのソフトウェア。

・マクロ
複数の操作や手順を一つにまとめ、必要に応じて呼び出せるようにする機能。

・VBA
Microsoft Officeの製品においてVisual Basicの簡易版を用い、動作の一部を変更したり、繰り返し行われる定型的な作業や複雑な処理を自動的に実行させられる機能。

・GAS（Google Apps Script）
「JavaScript」をベースにしたプログラミング言語。Googleのサーバー上で実行されるため、自前のサーバーを用意しなくてもいい。複数のGoogle機能を組み合わたり、twitterなど他サービスとも連携することが可能。

・API
ソフトウェアやアプリケーションなどの一部を外部に向けて公開し、第三者が開発したソフトウェアと機能を提携できるようにしたもの。

・WEB API
API提供者とAPI利用者とのやりとりをHTTP／HTTPSベースで実現するAPIのこと。

・REST API
REST と呼ばれる原則に従って設計されたWEB APIのこと。

・SOAP
コンピュータ上で動作するプログラム同士がネットワークを通じてメッセージを伝え合い、連携して動作するための通信プロトコル。

・Ajax
JavaScriptとXMLを使って非同期にサーバとの間の通信を行うこと。

・XML
HTMLとは違ったファイルの書き方の一つ。

・JSON
データフォーマットの一種。eval()関数を用い、JavaScriptオブジェクトに変換することができる

・ステータスコード
Webサーバーからのレスポンスの結果を表す、3桁の数字コードのこと。

・クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
プロトコルとポート番号を含んだドメイン。サーバーからのレスポンスにリソースの共有を許可するためのヘッダーを追加して表示する仕組み。

・バリデーション
入力内容や記述内容が要件を満たしているか、妥当性を確認すること。

・データ連携
異なるアプリケーションやシステムをまたいでデータを共有、活用するために、それぞれの言葉や解釈の垣根を取り払う仕組み。企業が持っている大量のデータを資産として有効活用するためのもの。

・Daemon
UNIX系OSでメインメモリ上に常駐して特定の機能を提供するプログラム。

・CRON
Daemonの一種。利用者の設定したスケジュールに従って指定されたプログラムを定期的に起動してくれるもの

・バッチ
プログラムにおいて、どこかのタイミングでまとめて実施される処理のこと。

・ログ
コンピュータの利用状況やデータ通信など履歴や情報の記録のこと。

・CSV
データの形式の一つで、項目をカンマ「,」で区切って列挙したもの。

・TSV
データの形式の一つで、項目を「タブ」で区切って列挙したもの。

・プルリクエスト（マージリクエスト）
GitHubにおいて、開発者のローカルリポジトリでの変更を他の開発者に通知する機能。

■ チケット管理ツール
・asana
タスク管理のレイアウトを選ぶことができる。マルチデバイスにも対応。複雑な開発を行うような大規模チーム向け。

・Backlog
300種類以上のキャラクターアイコンやスターによるいいね機能など、コミュニケーションを促す機能が豊富。バージョン管理システムのGitやSubversionのリポジトリ機能を備えている。

・Jooto
ガントチャート機能などを含む全機能を無料で使うことができ、GoogleカレンダーやSlackなどの外部アプリとも連携可能。無料で全機能使用できるが人数制限がある。

・Readmine
完全無料で利用できる代わりに、サーバーと保守管理が必要になる。導入の敷居が高く、エンジニア向け。

・Trello
比較的シンプルで使いやすい。小規模な開発に向いており、複雑な用途には不向き。

■ バージョン管理
・集中型
1つのリポジトリ(ファイル)を、開発者たちがコピー取得し、作業後は反映させていく方式。

・分散型
リモートリポジトリをサーバ上に置き、開発者それぞれがローカルにリポジトリを持つ。普段はローカルリポジトリを使って作業し、ある程度作業できたらリモートリポジトリに反映させていく方式。

・Github
世界中のユーザーが編集したコードやデザインデータを保存・共有しやすくするためのWEBサービス。複数のユーザーでコミュニケーションしやすいように機能が整っている。

・Backlog
チケット管理ツールの一つ。バージョン管理システムのGitやSubversionのリポジトリ機能を備えている。

・SourceTree
GitをGUI形式で簡単に使えるようにしたツール。

・Tortoise SVN
Windowsエクスプローラと直接統合されて動作し、エクスプローラ上からファイルとディレクトリの状態を一目で確認できる。

・Git Flow
わかりやすいブランチモデルの導入 git プラグインのこと。他のワークフローと比べ、大規模で複雑な構成に向いており、アプリケーションのように「リリース」を必要とするソフトウェアの開発に適している。

・master
プロダクトとしてリリースするためのブランチ。リリースしたらタグ付けする。

・release
プロダクトリリースの準備。 機能の追加などとは独立させることで、 リリース時に含めるコードを綺麗な状態に保つ。新機能に不具合が見つかった場合は、修正用のブランチに分岐させ、修正が終わったらこのブランチにmergeする。

・develop
開発ブランチ。コードが安定し、リリース準備ができたら master へマージする。リリース前はこのブランチが最新バージョンとなる。

・feature
developからブランチを分岐させ、新機能の開発を行うのに用いる。develop から分岐し、最終的には develop にマージする。

■ FW／ライブラリ
・FW
フレームワークの略。
プログラミングで使用する、汎用的な機能や基本的な処理パターンなどをまとめた半完成品のこと。言語における定数みたいなもの。

・Spring Framework
主に大規模なJava開発の効率を向上し、高度な機能を容易に利用できるようにしてくれるフレームワーク。

・Struts
Javaを用いてWebアプリケーションを開発するためのフレームワーク。

・JSF（Java Server Faces）
Javaを用いてWebアプリケーションを開発するためのフレームワーク。Webサーバでデータの管理や処理を行い、Webブラウザで表示・入力・操作を行うWebアプリケーションを構築するための諸機能がある。

・ライブラリ
特定の機能を持ったコンピュータプログラムを他のプログラムから呼び出して利用できるように部品化し、それらを複数集めて一つのファイルに収納したもの。

・Bootstrap
Twitter風のデザインやUIのWebアプリケーションを素早く開発できるCSSのツールキット。CSSは一つ一つのコードは簡単なものの、コードが多くなると統一性が無くなったりするので、そういった問題を防ぐことができる。

・Flyway
データベースの状態をバージョン管理できるようになるツール。

・Jackson
プログラム全体を複数のモジュールに分割するための設計指針の一つで、入出力データの構造からプログラムの構造を決定していく方式。

・jQuery
より簡単な記法で実現できように設計されたJavaScriptライブラリ。初心者に易しい。CSSのセレクタ記法によりHTML部品を操作できる。

・Junit
Javaで書かれたプログラムのテストを自動化するためのツール。

・Log4j
ログを出力するためのライブラリ。キーロガーの一種。外部設定ファイルに出力方法や出力書式を全て記述できる。

・Lombok
Java特有の冗長なコードを簡潔にしてくれるライブラリ。

・ORM
オブジェクト関係マッピング (ORM: Object-relational mapping)。
データベースからデータを取得し、取得したデータをオブジェクト化する。SQLをORMが組み立てるので、PHP言語の中にSQLを組み込むようなことを防げる(そうすると可読性が落ちる)。

■ 連絡ツール
・ChatWork
タスク管理機能を持ち、チャットをしながら発生したタスクを即座に作成・管理できる。

・Slack
外部サービスと連携したり、コードを投稿できるsnippet機能がある。またチャット内でミニブログを作成するpost機能を持ち、話題ごとの情報共有が可能。

・IP Messenger
LAN用のメッセンジャーソフト。同じネットワーク内のメンバーを自動認識し、簡単にクライアント同士がリアルタイムに情報交換できる。

■ Java
・Javadoc
コードの内容から自動判定したり、特定の書式で書かれたコメントを抜き出すことによって自動作成されたコードの説明書。クラスの概要やメソッドの概要を記述しておくと、その情報からHTML形式のドキュメントファイルを生成してくれる。

・アノテーション
あるデータに対して関連する情報を注釈として付与すること。

・メモリ管理
コンピュータのメモリを管理するもの。

・ヒープ
コンピュータプログラムが利用するメモリ領域の種類の一つで、実行時に任意のタイミングで確保や解放が可能なものをヒープ領域という。

・GC
ガベージコレクション。
コンピュータプログラムの実行環境などが備える機能の一つで、実行中のプログラムが占有していたメモリ領域のうち不要になったものを自動的に解放し、空き領域として再利用できるようにするもの。

・GoF
ギャング・オブ・フォー。
「オブジェクト指向における再利用のためのデザインパターン」の著者4人のこと。

・デザインパターン
ソフトウェアの設計時に直面しがちな問題とその典型的な解決策を整理し、様々な場面で応用・再利用できる形にまとめたもの。

■ その他
・オブジェクト指向
互いに関連するデータと処理内容をオブジェクト（一つのまとまり）として定義し、様々なオブジェクトを組み合わせて関連性や相互作用を記述してシステム全体を構築していく手法。

・バッチ処理
一定量あるいは一定期間のデータを集め、一括処理するための処理方法。

・コンパイル
プログラミング言語で記述されたソフトウェアのコードを、コンピュータが実行可能な形式に変換すること。

・カバレッジ
システム開発の最終的な検証段階における、テストが行われる範囲のこと。

・プラットホーム
ある機器やソフトウェアを動作させるのに必要な、基盤となる装置やソフトウェア、サービス、あるいはそれらの組み合わせ（動作環境）のこと。
